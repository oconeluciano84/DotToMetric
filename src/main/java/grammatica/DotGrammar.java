/* Generated By:JavaCC: Do not edit this line. DotGrammar.java */
package grammatica;
import utility.*;
public class DotGrammar implements DotGrammarConstants {
  public ObjMetodo metodo;
  public TabellaSimboli tab_simboli;

  public ObjMetodo start() throws ParseException {
    metodo = new ObjMetodo("");
    tab_simboli = new TabellaSimboli();

    init();

    metodo.setSimboli(tab_simboli);
    metodo.inserisciMappaChiamate();
    return metodo;
}

  final public void init() throws ParseException {
          metodo.setNomeEsteso(getNomeMetodo());
    jj_consume_token(0);
  }

  final public String getNomeMetodo() throws ParseException {
  Token t;
  String nome_metodo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGRAPH:
      jj_consume_token(DIGRAPH);
      break;
    case GRAPH:
      jj_consume_token(GRAPH);
      break;
    case SUBGRAPH:
      jj_consume_token(SUBGRAPH);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(ID);
                                                        nome_metodo= t.image;
    jj_consume_token(PARENTESI_GRAFFA_APERTA);
    skip_intestazione();
    jj_consume_token(PARENTESI_GRAFFA_CHIUSA);
         {if (true) return nome_metodo;}
    throw new Error("Missing return statement in function");
  }

  final public void skip_intestazione() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NODE:
      case EDGE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EDGE:
        jj_consume_token(EDGE);
        break;
      case NODE:
        jj_consume_token(NODE);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PARENTESI_QUADRA_APERTA);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FONTSIZE:
        case SHAPE:
        case FONTNAME:
        case LABELFONTSIZE:
        case LABELFONTNAME:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FONTNAME:
          jj_consume_token(FONTNAME);
          break;
        case FONTSIZE:
          jj_consume_token(FONTSIZE);
          break;
        case LABELFONTNAME:
          jj_consume_token(LABELFONTNAME);
          break;
        case LABELFONTSIZE:
          jj_consume_token(LABELFONTSIZE);
          break;
        case SHAPE:
          jj_consume_token(SHAPE);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(UGUALE);
        jj_consume_token(ID);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRGOLA:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
          jj_consume_token(VIRGOLA);
        }
      }
      jj_consume_token(PARENTESI_QUADRA_CHIUSA);
      jj_consume_token(PUNTO_E_VIRGOLA);
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RANKDIR:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(RANKDIR);
      jj_consume_token(UGUALE);
      jj_consume_token(ID);
      jj_consume_token(PUNTO_E_VIRGOLA);
    }
    gestioneNodi();
  }

  final public void gestioneNodi() throws ParseException {
  Token t;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      t = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARENTESI_QUADRA_APERTA:
        dichiarazioneNodo(t);
        break;
      case ARCO:
        dichiarazioneArco(t);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void dichiarazioneNodo(Token id) throws ParseException {
  Token t;
    jj_consume_token(PARENTESI_QUADRA_APERTA);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STYLE:
      case COLOR:
      case FILLCOLOR:
      case HEIGHT:
      case WIDTH:
      case URL:
      case LABEL:
      case FONTCOLOR:
      case DIR:
      case TOOLTIP:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STYLE:
      case COLOR:
      case FILLCOLOR:
      case HEIGHT:
      case WIDTH:
      case URL:
      case FONTCOLOR:
      case DIR:
      case TOOLTIP:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEIGHT:
          jj_consume_token(HEIGHT);
          break;
        case WIDTH:
          jj_consume_token(WIDTH);
          break;
        case COLOR:
          jj_consume_token(COLOR);
          break;
        case FILLCOLOR:
          jj_consume_token(FILLCOLOR);
          break;
        case STYLE:
          jj_consume_token(STYLE);
          break;
        case FONTCOLOR:
          jj_consume_token(FONTCOLOR);
          break;
        case URL:
          jj_consume_token(URL);
          break;
        case DIR:
          jj_consume_token(DIR);
          break;
        case TOOLTIP:
          jj_consume_token(TOOLTIP);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(UGUALE);
        jj_consume_token(ID);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRGOLA:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_7;
          }
          jj_consume_token(VIRGOLA);
        }
        break;
      case LABEL:
        jj_consume_token(LABEL);
        jj_consume_token(UGUALE);
        t = jj_consume_token(ID);
                                                           tab_simboli.addSimbolo(id.image, t.image);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VIRGOLA:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_8;
          }
          jj_consume_token(VIRGOLA);
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(PARENTESI_QUADRA_CHIUSA);
    jj_consume_token(PUNTO_E_VIRGOLA);
  }

  final public void dichiarazioneArco(Token id) throws ParseException {
  Token t;
    jj_consume_token(ARCO);
    t = jj_consume_token(ID);
                          if(!tab_simboli.isId(id.image))
                                                        tab_simboli.addSimbolo(id.image);

                                                metodo.addElement(id.image, t.image);
    jj_consume_token(PARENTESI_QUADRA_APERTA);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STYLE:
      case COLOR:
      case FONTSIZE:
      case LABEL:
      case FONTNAME:
      case DIR:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLOR:
        jj_consume_token(COLOR);
        break;
      case FONTSIZE:
        jj_consume_token(FONTSIZE);
        break;
      case STYLE:
        jj_consume_token(STYLE);
        break;
      case FONTNAME:
        jj_consume_token(FONTNAME);
        break;
      case DIR:
        jj_consume_token(DIR);
        break;
      case LABEL:
        jj_consume_token(LABEL);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(UGUALE);
      jj_consume_token(ID);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGOLA:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_10;
        }
        jj_consume_token(VIRGOLA);
      }
    }
    jj_consume_token(PARENTESI_QUADRA_CHIUSA);
    jj_consume_token(PUNTO_E_VIRGOLA);
  }

  /** Generated Token Manager. */
  public DotGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x380000,0x60000,0x60000,0x4000000,0x4000000,0x100,0x800000,0x0,0x8800,0xfb000000,0x7b000000,0x100,0x100,0xfb000000,0x87000000,0x87000000,0x100,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x1b,0x1b,0x0,0x0,0x2000,0x0,0x184,0x184,0x0,0x0,0x184,0x82,0x82,0x0,};
   }

  /** Constructor with InputStream. */
  public DotGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DotGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DotGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DotGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DotGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DotGrammar(DotGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DotGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
