/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(DotGrammar2)
package grammatica;
import utility.*;
public class DotGrammar2
{
  public ObjMetodo metodo;
  public TabellaSimboli tab_simboli;
  
  public ObjMetodo start() throws ParseException {
    metodo = new ObjMetodo("");
    tab_simboli = new TabellaSimboli();
    
    init();

    metodo.setSimboli(tab_simboli);
    metodo.inserisciMappaChiamate();
    return metodo;
}

}

PARSER_END(DotGrammar2)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| <"edge[" (~[";"])* ";">
| <"node[" (~[";"])* ";">
| <"rankdir" (~[";"])* ";">
}

TOKEN : /*OPERANDI CARATTERI-SINGOLI*/
{
  < DUE_PUNTI  : ":" >
| < MAGGIORE : ">" >
| < UGUALE  : "=" >
| < VIRGOLA  : "," >
| < MINORE : "<" >
| < PUNTO_E_VIRGOLA : ";" >
| < PARENTESI_QUADRA_APERTA : "[" >
| < PARENTESI_QUADRA_CHIUSA : "]" >
| < PARENTESI_GRAFFA_APERTA : "{" >
| < PARENTESI_GRAFFA_CHIUSA : "}" >

}

TOKEN : /*OPERANDI MULTI-CARATTERI*/
{
< ARCO  : "->" >
| < BACKSLASH : "\"">
}

TOKEN : /*PAROLE_CHIAVI*/
{
< NODE : ("n"|"N")("o"|"O")("d"|"D")("e"|"E") >
| < EDGE : ("e"|"E")("d"|"D")("g"|"G")("e"|"E")>
| < DIGRAPH : ("d"|"D")("i"|"I")("g"|"G")("r"|"R")("a"|"A")("p"|"P")("h"|"H") >
| < GRAPH : ("g"|"G")("r"|"R")("a"|"A")("p"|"P")("h"|"H") >
| < SUBGRAPH : ("s"|"S")("u"|"U")("b"|"B")("g"|"G")("r"|"R")("a"|"A")("p"|"P")("h"|"H") >
| < STRICT : ("s"|"S")("t"|"T")("r"|"R")("i"|"I")("c"|"C")("t"|"T") >
| < RANKDIR : ("r"|"R")("a"|"A")("n"|"N")("k"|"K")("d"|"D")("i"|"I")("r"|"R") >
}

TOKEN : /*ATTRIBUTI*/
{
  < STYLE : "style" >
| < COLOR : "color">
| < FONTSIZE : "fontsize" >
| < FILLCOLOR : "fillcolor" >
| < HEIGHT : "height" >
| < WIDTH : "width" >
| < URL : "URL" >
| < LABEL : "label" >
| < SHAPE : "shape" >
| < FONTNAME  : "fontname" >
| < FONTCOLOR  : "fontcolor" >
| < LABELFONTSIZE : "labelfontsize" >
| < LABELFONTNAME : "labelfontname">
| < BGCOLOR : "bgcolor">
| < PENCOLOR : "pencolor">
| < DIR : "dir">
| < TOOLTIP : "tooltip">
}

TOKEN : /*NUMERI*/
{
 < #DIGITS : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN : /*LETTERALI*/
{
 < #LETTER : (["a"-"z", "A"-"Z", "_"]) >
| < #ESCAPED_QUOTES : ("\\")("\"") >
}

TOKEN : /*ID = STRING | NUMERAL | DOUBLE_QUOTED_STRING | HTML_STRING */
{
 < ID :  (("-")?((".")< DIGITS >| < DIGITS >("."((< DIGIT >)*))))								/* NUMERICO */
| (< LETTER >(< LETTER >|< DIGIT >)*)															/* STRINGA */
| (< BACKSLASH >(~[" ","\r","\t","\n","\""]|(< ESCAPED_QUOTES >))*< BACKSLASH >)				/* DOUBLE_QUOTED_STRING*/
| (< MAGGIORE >(~[" ","\r","\t","\n"])* < MINORE >)>											/* STRINGA_HTML */
}




void init():
{}
{

	{ metodo.setNomeEsteso(getNomeMetodo()); }
  	< EOF >
  
}

String getNomeMetodo():
{
  Token t;
  String nome_metodo;
  }
{
	( <DIGRAPH> | <GRAPH> | <SUBGRAPH> ) t =  <ID> {nome_metodo= t.image;}

	< PARENTESI_GRAFFA_APERTA > gestioneNodi() < PARENTESI_GRAFFA_CHIUSA > 

  	{return nome_metodo; }

  	
  
}

void gestioneNodi():
{
  Token t;
  }

{
	   ( t = < ID >  ( dichiarazioneNodo(t) | dichiarazioneArco(t) ) )*
  }

void dichiarazioneNodo(Token id):
{
  Token t;
  }

{

	<PARENTESI_QUADRA_APERTA >	
		(
		 (
			( < HEIGHT > | < WIDTH > | < COLOR > | < FILLCOLOR > | < STYLE > | < FONTCOLOR >
			| < URL > | < DIR > | < TOOLTIP > ) < UGUALE > < ID > (< VIRGOLA >)*
		 )
		 |
		 (
			< LABEL >  < UGUALE > t = < ID > { tab_simboli.addSimbolo(id.image, t.image);} (< VIRGOLA >)*
		 )
		)*
	< PARENTESI_QUADRA_CHIUSA > < PUNTO_E_VIRGOLA >

     }

void dichiarazioneArco(Token id):
{
  Token t;
}
{
    < ARCO > t = < ID > { if(!tab_simboli.isId(id.image))
   							tab_simboli.addSimbolo(id.image);

						metodo.addElement(id.image, t.image);
   					 }
	<PARENTESI_QUADRA_APERTA >
	(
		( < COLOR > | < FONTSIZE > | < STYLE > | < FONTNAME >  | < DIR > | < LABEL > )
		< UGUALE > < ID > (< VIRGOLA >)*
	)*
	< PARENTESI_QUADRA_CHIUSA > < PUNTO_E_VIRGOLA >
 }

